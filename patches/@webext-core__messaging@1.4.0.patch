diff --git a/lib/chunk-ALTBYIMW.js b/lib/chunk-ALTBYIMW.js
index cccd6ec9b2cc14b35ff3b145428f16de69520f84..3afe1a855bbd62e1c60e842260f813e04d4dcbcf 100644
--- a/lib/chunk-ALTBYIMW.js
+++ b/lib/chunk-ALTBYIMW.js
@@ -4,15 +4,15 @@ var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
 var __getOwnPropSymbols = Object.getOwnPropertySymbols;
 var __hasOwnProp = Object.prototype.hasOwnProperty;
 var __propIsEnum = Object.prototype.propertyIsEnumerable;
-var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
+var __defNormalProp = (obj, key, value) =>
+  key in obj
+    ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value })
+    : (obj[key] = value);
 var __spreadValues = (a, b) => {
-  for (var prop in b || (b = {}))
-    if (__hasOwnProp.call(b, prop))
-      __defNormalProp(a, prop, b[prop]);
+  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
   if (__getOwnPropSymbols)
     for (var prop of __getOwnPropSymbols(b)) {
-      if (__propIsEnum.call(b, prop))
-        __defNormalProp(a, prop, b[prop]);
+      if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
     }
   return a;
 };
@@ -20,12 +20,10 @@ var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
 var __objRest = (source, exclude) => {
   var target = {};
   for (var prop in source)
-    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
-      target[prop] = source[prop];
+    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];
   if (source != null && __getOwnPropSymbols)
     for (var prop of __getOwnPropSymbols(source)) {
-      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
-        target[prop] = source[prop];
+      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];
     }
   return target;
 };
@@ -45,13 +43,14 @@ var __async = (__this, __arguments, generator) => {
         reject(e);
       }
     };
-    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
+    var step = (x) =>
+      x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
     step((generator = generator.apply(__this, __arguments)).next());
   });
 };
 
 // src/generic.ts
-import { serializeError, deserializeError } from "serialize-error";
+import { serializeError, deserializeError } from 'serialize-error';
 function defineGenericMessanging(config) {
   let removeRootListener;
   let perTypeListeners = {};
@@ -73,26 +72,30 @@ function defineGenericMessanging(config) {
           id: getNextId(),
           type,
           data,
-          timestamp: Date.now()
+          timestamp: Date.now(),
         };
-        (_a2 = config.logger) == null ? void 0 : _a2.debug(`[messaging] sendMessage {id=${message.id}} \u2500\u1405`, message, ...args);
+        (_a2 = config.logger) == null
+          ? void 0
+          : _a2.debug(`[messaging] sendMessage {id=${message.id}} \u2500\u1405`, message, ...args);
         const response = yield config.sendMessage(message, ...args);
-        const { res, err } = response != null ? response : { err: new Error("No response") };
-        (_b = config.logger) == null ? void 0 : _b.debug(`[messaging] sendMessage {id=${message.id}} \u140A\u2500`, { res, err });
-        if (err != null)
-          throw deserializeError(err);
+        const { res, err } = response != null ? response : { err: new Error('No response') };
+        (_b = config.logger) == null
+          ? void 0
+          : _b.debug(`[messaging] sendMessage {id=${message.id}} \u140A\u2500`, { res, err });
+        // if (err != null)
+        //   throw deserializeError(err);
         return res;
       });
     },
     onMessage(type, onReceived) {
       var _a2, _b, _c;
       if (removeRootListener == null) {
-        (_a2 = config.logger) == null ? void 0 : _a2.debug(
-          `[messaging] "${type}" initialized the message listener for this context`
-        );
+        (_a2 = config.logger) == null
+          ? void 0
+          : _a2.debug(`[messaging] "${type}" initialized the message listener for this context`);
         removeRootListener = config.addRootListener((message) => {
           var _a3, _b2;
-          if (typeof message.type != "string" || typeof message.timestamp !== "number") {
+          if (typeof message.type != 'string' || typeof message.timestamp !== 'number') {
             const err = Error(
               `[messaging] Unknown message format, must include the 'type' & 'timestamp' fields, received: ${JSON.stringify(
                 message
@@ -101,20 +104,27 @@ function defineGenericMessanging(config) {
             (_a3 = config.logger) == null ? void 0 : _a3.error(err);
             throw err;
           }
-          (_b2 = config == null ? void 0 : config.logger) == null ? void 0 : _b2.debug("[messaging] Received message", message);
+          (_b2 = config == null ? void 0 : config.logger) == null
+            ? void 0
+            : _b2.debug('[messaging] Received message', message);
           const listener = perTypeListeners[message.type];
-          if (listener == null)
-            return;
+          if (listener == null) return;
           const res = listener(message);
-          return Promise.resolve(res).then((res2) => {
-            var _a4;
-            (_a4 = config == null ? void 0 : config.logger) == null ? void 0 : _a4.debug(`[messaging] onMessage {id=${message.id}} \u2500\u1405`, { res: res2 });
-            return { res: res2 };
-          }).catch((err) => {
-            var _a4;
-            (_a4 = config == null ? void 0 : config.logger) == null ? void 0 : _a4.debug(`[messaging] onMessage {id=${message.id}} \u2500\u1405`, { err });
-            return { err: serializeError(err) };
-          });
+          return Promise.resolve(res)
+            .then((res2) => {
+              var _a4;
+              (_a4 = config == null ? void 0 : config.logger) == null
+                ? void 0
+                : _a4.debug(`[messaging] onMessage {id=${message.id}} \u2500\u1405`, { res: res2 });
+              return { res: res2 };
+            })
+            .catch((err) => {
+              var _a4;
+              (_a4 = config == null ? void 0 : config.logger) == null
+                ? void 0
+                : _a4.debug(`[messaging] onMessage {id=${message.id}} \u2500\u1405`, { err });
+              return { err: serializeError(err) };
+            });
         });
       }
       if (perTypeListeners[type] != null) {
@@ -136,14 +146,8 @@ function defineGenericMessanging(config) {
         delete perTypeListeners[type];
       });
       cleanupRootListener();
-    }
+    },
   };
 }
 
-export {
-  __spreadValues,
-  __spreadProps,
-  __objRest,
-  __async,
-  defineGenericMessanging
-};
+export { __spreadValues, __spreadProps, __objRest, __async, defineGenericMessanging };
